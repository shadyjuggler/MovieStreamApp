scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    user(id: ID! @eq): User @find
    users: [User!]! @paginate

	hello(msg: String): String

	movie(id: ID! @eq): Movie @find
	movies: [Movie!]! @paginate

	genre(id: ID! @eq): Genre @find
	genres:[Genre!]! @paginate
}

type Mutation {
	createGenre(name: String!): Genre! @create
	updateGenre(id: ID!, name: String): Genre! @update
	deleteGenre(id: ID! @whereKey): String! @field(resolver: "App\\GraphQL\\Mutations\\DeleteGenre")
}

type User {
	id: ID!
	username: String!
	email: String!
	email_verified_at: DateTime

	watchList: [Movie]! @belongsToMany(relation: "watchLists")
	likes: [Movie!]! @belongsToMany(relation: "likedMovies")
	comments: [Comment]! @hasMany(relation: "comments")

	created_at: DateTime!
	updated_at: DateTime!
}

type Movie {
	id: ID!
	adult: Boolean!
	bg_path: String!
	language: String!
	title: String!
	overview: String!
	tagline: String!
	poster_path: String!
	release_date: String!
	rating: Float!
	budget: Int!
	duration: Int!
	director: String! # to fix, that field returning json as string
	cast: String! # to fix, that field returning json as string

	likes: Int! @field(resolver: "App\\GraphQL\\Queries\\MovieLikes")
	comments: [Comment!]! @hasMany(relation: "comments")
	genres: [Genre!]! @belongsToMany(relation: "genres")

	created_at: DateTime!
	updated_at: DateTime!
}

type Genre {
	id: ID!
	name: String!
	movies: [Movie!]! @belongsToMany(relation: "movies")
	created_at: DateTime!
	updated_at: DateTime!
}

type Comment {
	id: ID!
	user: User
	comment: String!
	movie: Movie
}